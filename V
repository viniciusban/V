#!/usr/bin/env bash
#
# V - Work effectively with virtualenvs

me=$(basename "$0")

_help () {
	cat <<-_EOF_
	Work with Python virtualenvs the right way.
	Usage: ${me} <command>
	where <command>:
	    help: show this screen and exit.
	    enter: enter the virtualenv in a subshell.
	_EOF_
}

_enter_virtualenv () {
	where="$1"
	commands=$(_build_commands_to_enter "$where")
	bash --init-file <(echo $commands)
}


_build_commands_to_enter () {
	#
	# You must add a semicolon to every command echoed.
	#
	where="$1"
	echo "echo 'Virtualenv location: $where';"

	if [[ -f $HOME/.bashrc ]]; then
	   	echo "source $HOME/.bashrc;"
	fi

	cat <<-_EOD_
		export VIRTUAL_ENV='${where}/bin';
		export PATH='"${where}"/bin:${PATH}';
		hash -r;
		python --version;
	_EOD_

	for file in {.env,.env.local}; do
		if [[ -r $file ]]; then
			cat <<-_EOD_
				echo 'Loading configuration file: $file';
				source $file;
			_EOD_
			break
		fi
	done
	echo "echo 'Type \"exit\" or press CTRL-D to exit';"
}


_main () {
	while true; do
		case "$1" in
			enter )
				if [[ -z "$2" ]]; then
					echo "Enter where?"
					return 1
				fi
				_enter_virtualenv "$2"
				return
			;;

			* )
				_help
				return
			;;
		esac
	done
}

_main "$@"
