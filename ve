#!/usr/bin/env bash
#
# ve manages virtualenv. The right way.

me=ve

if [[ -z "$XDG_DATA_HOME" ]]; then
    XDG_DATA_HOME="$HOME/.local/share"
fi

VIRTUALENVS_HOME=${XDG_DATA_HOME}/virtualenvs

mkdir -p ${VIRTUALENVS_HOME}

_quick_help () {
    cat <<-_EOF_
	Usage: ve [gen [--inline] | run <command> | shell | where | help]
	_EOF_
}

_help () {
    cat <<-_EOF_
	${me} manages virtualenv. The right way.

	Usage: ve <command> [<option>] [<arg>]
	Commands:
	  list
	      List all virtualenvs under ${VIRTUALENVS_HOME}
	  gen [--inline]
	      Generate virtualenv's path for current directory in the global pool.
	      \$ python -m venv \$(ve gen)
	  run <command>
	      Run <command> inside the virtualenv.
	      \$ ve run pip install -r requirements.txt
	  shell
	      Open a sub-shell with the virtualenv activated.
	      Source ".env" and ".env_override" files.
	  where
	      Show the virtualenv location.
	_EOF_
}

_enter_virtualenv () {
    where="$1"
    commands=$(_build_commands_to_enter "$where")
    bash --init-file <(echo $commands)
}


_build_commands_to_enter () {
    #
    # You must add a semicolon to every command echoed.
    #
    where="$1"
    echo "echo 'Virtualenv location: $where';"

    if [[ -f $HOME/.bashrc ]]; then
           echo "source $HOME/.bashrc;"
    fi

    cat <<-_EOD_
	    export VIRTUAL_ENV='${where}';
	    export PATH='${where}/bin:${PATH}';
	    hash -r;
	    python --version;
	_EOD_

    for file in {.env,.env.local,.env_override}; do
        if [[ -r $file ]]; then
            cat <<-_EOD_
			    echo 'Loading configuration file: $file';
			    source $file;
			_EOD_
        fi
    done
    echo "echo 'Type \"exit\" or press CTRL-D to exit';"
}


_prepare_virtualenv () {
    where="$1"
    export VIRTUAL_ENV="${where}";
    export PATH="${where}/bin:${PATH}";
    hash -r;

    for file in {.env,.env.local,.env_override}; do
        if [[ -r $file ]]; then
            source $file;
        fi
    done
}


_discover_virtualenv () {
    declare -a std_locations
    std_locations=( \
        "$(_generate_path)" \
        "$(_generate_path --legacy-without-hash)" \
        "$(_generate_path --legacy-hashed)" \
        "$(_generate_path --inline)")
    for path in "${std_locations[@]}"; do
        if [[ -d $path ]]; then
            echo $path
            return
        fi
    done

    declare -a legacy_locations
    legacy_locations=( \
        "$PWD/.venv" \
        "$PWD/venv" \
        "$PWD/env")
    for path in "${legacy_locations[@]}"; do
        if [[ -d $path ]]; then
            echo $path
            return
        fi
    done

    return 1
}


_generate_path () {
    option="$1"
    if [[ "$option" = "--inline" ]]; then
        echo "${PWD}/.virtualenv"
        return
    fi

    if [[ -z "$option" ]]; then
        pyversion=$(python --version 2>&1 | cut -d' ' -f2)
        hash=$(echo $PWD | sha1sum | cut -d' ' -f1 | cut -c1-7)
        pwd_basename=$(basename $PWD)
        hashed="${pwd_basename}-${hash}-py${pyversion}"
        echo "${VIRTUALENVS_HOME}/${hashed}"
        return
    fi

    if [[ "$option" = "--legacy-without-hash" ]]; then
        pwd_without_home=${PWD/#${HOME}\//}
        pwd_with_slashes_substituted=${pwd_without_home//\//__}
        echo "${VIRTUALENVS_HOME}/${pwd_with_slashes_substituted}"
        return
    fi

    if [[ "$option" = "--legacy-hashed" ]]; then
        hash=$(echo $PWD | sha1sum | cut -d' ' -f1 | cut -c1-7)
        hashed=("$(basename $PWD)_$hash")
        echo "${VIRTUALENVS_HOME}/${hashed}"
        return
    fi
}

_run_command () {
    command="$@"
    where="$(_discover_virtualenv)"
    _prepare_virtualenv "$where"
    $command
}


_main () {
    case "$1" in
        list )
            ls -1 ${VIRTUALENVS_HOME}
        ;;

        shell )
            if [[ -n "$2" ]]; then
                where="$2"
            else
                where="$(_discover_virtualenv)"
                if [[ -z "$where" ]]; then
                    echo "There is no virtualenv attached to this directory" >&2
                    return 1
                fi
            fi
            _enter_virtualenv "$where"
            return
        ;;

        gen )
            if [[ -z "$2" ]]; then
                option=
            elif [[ "$2" =~ ^(-i|--inline)$ ]]; then
                option=--inline
            else
                echo "Invalid option" >&2
                return 1
            fi
            _generate_path $option
            return
        ;;

        run )
            shift
            _run_command "$@"
            return
        ;;

        where )
            _discover_virtualenv
            return
        ;;

        help )
            _help
            return
        ;;

        * )
            _quick_help
            return
        ;;
    esac
}

_main "$@"
